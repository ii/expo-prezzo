#+TITLE: Project Plan

* Goal
We would like to have interactive presentations at the Expo(happening in 3
weeks) that give a nice wow moment to visitors of the booth, showing them an
awesome feature of the cloud and the technology we work with. This document sets
the scope and iteration steps for these presentations.

* Project Description
At our booth, multiple screens will be displaying org-reveal presentations on
some aspect of open source/CNCF. A visitor to the booth can scan one of these
screens and be able to control it, specifically, for a set period of time.
Multiple visitors can be interacting with our presentations at the same time,
each vistior in control of their own screen and their own presentation. This may
be the same presentation some one else is looking at, or a different one.

This means we will need to have a QR code that is dynamically set with the admin
key for that particular presentation.

It would be cool for the visitor controls to include the presentation they are
wanting to look at, and not just the one they scanned, and perhaps some sort of
input they can add that is also displayed on a screen(e.g. a whiteboard that has
their doodle and tag).

* How it works
** Terms
- Server  :: our express server that bootstraps socket.io to handle events passed among clients.
- Client :: a browser that visits the web server.  It can then be turned into a Monitor or a Controller, depending.
- Monitor :: a client responsible for showing a presentation. Most likely will be our large-ass monitors.
- Controller :: a client responsible for controlling the slides of the presentation.  In reveal.js terms, the Monitor is the 'client' and the Controller is the 'master'.
- Event :: a change in state or Message sent from the Server to a Client.
- SotW :: is a list of MonitorStates, or an empty list
- MonitorState :: is an object representing a monitor, who its conected to, and what it's showing, as:
  #+begin_src yaml
  monitorId: ''
  monitorName: ''
  presentation: '' or nil
  socketID: '' or nil
  controllerID: '' or nil
  secret: '' or nil
  dateOfBirth: timestamp
  lastUpdated: timestamp
  #+end_src
- Message :: the content of an Event.
- Event Handler :: the action taken on a Message from an Event given the type of Client.
* Implementation
TODOs:
- [X] fix count for state of the world
- [X] implement prezzie choosing and navigation for all clients involved
- [ ] admin page
* TODO Admin Page
- [ ] accessible at /admin
- [ ] have some basic authentication
- [ ] can see all the monitors and their presentation
- [ ] can set monitor to specific presentation
- [ ] can randomize presentations across all monitors.
- [ ] can trigger monitor to get new name.
- [ ] can set page for all monitors
** Authentication
#+begin_src js
// express server

function authenicationMiddleware (req, res, next) {
    // authentication logic
    const { username, password} = req.body;
    if (users.includes(username) && password === ourPassword) {
        res.sendStatus(200)
        next()
    } else {
        res.sendStatus(403);
        res.json({body: "you don't belong here"});
    }
}

app.get("/admin", authenticationMiddleware, (req, res) => {
    if (res.status === 200)  {
        res.send(ourAdminPage)
    }})
app.get("/", staticPages)

socket.on("refresh all", (payload) => {
    if (payload.auth === ourPassword) {
        //refresh the things
        socket.emit('refreshed!')
    }
})

socket.on("grab all monitors", (payload) => {
    if (payload.auth === ourPassword) {
        socket.emit('refreshed!')
    }
})
#+end_src
* scratch
#+begin_src yaml
# admin is sho  wing presentation on all monitors.
- monitor: 132343234
  name: charlie
  presentation: prezzy1
  socketid: 1332
  secret: 13323
- monitor: 234343234j
  name: charlie
  socketid: 1332
  secret: 13323
  presentation: prezzy1
- monitor: 338383828j
  name: charlie
  socketid: 1332
  secret: 13323
  presentation: prezzy1
- monitor: djsa;3833828
  name: charlie
  presentation: prezzy1
  socketid: 1332
  secret: 13323
#+end_src
#+begin_src yaml
# cycled through the monitors
- monitor: 132343234
  name: dharlie
  presentation: nil
  socketid: nil
  secret: nil
- monitor: 234343234j
  name: ben
  presentation: nil
  socketid: nil
  secret: nil
- monitor: 338383828j
  name: ewtwo
  presentation: nil
  socketid: nil
  secret: nil
#+end_src

#+begin_src yaml
# client syncs with monitor and requests presentation
io.emit("set presentation"{name: dharlie, presentation: prezzy1})
#+end_src

* Logicistics
** Providing monitors new names on prezzie selection
Monitor says to Server, I am ={ monitor }= and would like a new name.
Server finds the current MonitorID in the ={ monitor }= object and rewrites the monitor name.
Server omits a updated Monitor object.
Client Monitor hears omittion, checks the MonitorID for a match and updates it's local monitor object.
* communication for name refresh
from our scratch

 Monitor name : Alan   Controller: synced to Alan

Controller goes back:
sends "new token"
eonctroller recieves token
monitor receives token
Controller sends "new name"
controller receives new name
controller sends "presentation update"
monitor receives name


in prezzy init:
on"presentation update", check "does this apply to me?" if not, don't change.


server{A} | controller{A} | monitor{A}   'presentations.html?m=A'
=>
server{b} | controller{A} | monitor{A} 'server.emits("B")`
=>
  - server{b} | controller{b} | monitor{b}
  - server{b} | controller{b} | monitor{A} 'update presentation for b'
  - server{b} | controller{A} | monitor{b}
  ....
  emit(' we are iall in sync", server{b} | controller{b} | monitor{b}) 'update presenation for b'

//index.js
let synced = {controller: false, monitor: false}
socket.on("controller synced", () => {
  synced.controller = true;
  if (synced.monitor) {
    socket.emit("okay to choose presentation")
  }
})

socket.on("monitor synced", (monitor) => {
  synced.monitor = true;
  if (synced.controller) {
    io.emit("okay to choose presentation")
  }
})






* Monitor state sharing
controller + monitorName connects to monitor,
controller now has monitorID from monitorName,
monitorName changes,
controller finds monitor update by monitorID, providing a new monitorName to share,


* Change when monitorName changes
controller connects with monitorName,
monitorName changes,
monitor receives new name,
presentation is selected by controller


controller => new token please!
server => emits "new tokens supplied" STATE
controller and monitor listen for that message and update.
controller says "new name please!"
server => emits "new name supplied" STATE
controller and monitor listen for that message.

controller => new token please!
server => new tokens supplied!
monitor says, "I have new token! new name please!"
server->monitor says "here is your new name"
monitor says "i have my new name!"
server emits "new name for monitor" STATE
client

client interaction freeze between new token request and receiving new name message.

server sotw =[...a,....b,{name: charlie, token: 123, monitorID: a24}]

controller.sessionStorage = {name: charlie, token: 123}
monitor.sessionStorage = {name: charlie, token: 123}
"controller presses go back" => presentations.html?m=charlie
controller: emit("New Connection", sessionStorage)
....interactions pause, cannot choose presentation, see "syncing..."
server recieves "new connection"...which monitor do we update?
monitor = sotw.find(m=> m.monitorName === controller.payload.monitorName)
grab new name for monitor
grab new token and secret for monitor
io.emit("Name change!", sotw)
Monitor receives ("Name Change", payload), finds its object using its monitorID
if localMonitor.monitorName !== payload.monitor.monitorName
localMonitor updates and emits ("I got a new name!", monitor)
server listens for "i got a new name!", emits("connection ready")


controller says "New Connection", sessionStorage)
....interactions pause, cannot choose presenation yet...sees "syncing"....
server receives message, changes the name and token in the sotw for the server matching on the name provided by controller.
socket.emit("here's your new monitor, waiting for confirmation")
controller receives message, says "okay"
....interactions stay pauses...
server receives okay, sends "monitors, name change!", sotw)
monitors receive "name change", checks sotw matching on monitor id
if localname doesn't match sotw name, updates local name then emits("name changed!", monitorName)
server receives "name changed", does io.emit("connection ready", monitorName)
controllers receive "connection ready", if payload.monitorName === local.monitorName....unfreeeze interactions, presentations ready to go.
